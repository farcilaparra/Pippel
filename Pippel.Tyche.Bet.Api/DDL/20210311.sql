CREATE TABLE TEAM 
   (	TEAM_ID RAW(16) CONSTRAINT TEA_TEAM_ID_NN NOT NULL ENABLE, 
	NAME VARCHAR2(100) CONSTRAINT TEA_NAME_NN NOT NULL ENABLE, 
	 CONSTRAINT TEAM_PK PRIMARY KEY (TEAM_ID)
  USING INDEX  ENABLE
   );

 CREATE TABLE MASTER_POOL 
   (	MASTER_POOL_ID RAW(16) CONSTRAINT MPO_MASTER_POOL_ID_NN NOT NULL ENABLE, 
	NAME VARCHAR2(100) CONSTRAINT MPO_NAME_NN NOT NULL ENABLE, 
	START_DATE DATE CONSTRAINT MPO_START_DATE_NN NOT NULL ENABLE, 
	END_DATE DATE CONSTRAINT MPO_END_DATE_NN NOT NULL ENABLE, 
	 CONSTRAINT MASTER_POOL_PK PRIMARY KEY (MASTER_POOL_ID)
  USING INDEX  ENABLE
   );

CREATE TABLE POINT 
   (	POINT_ID RAW(16) CONSTRAINT POI_POINT_ID_NN NOT NULL ENABLE, 
	WIN_OR_DRAW_POINT NUMBER(2,0) CONSTRAINT POI_WIN_OR_DRAW_POINT_NN NOT NULL ENABLE, 
	HOME_RESULT_POINT NUMBER(2,0) CONSTRAINT POI_HOME_RESULT_POINT_NN NOT NULL ENABLE, 
	AWAY_RESULT_POINT NUMBER(2,0) CONSTRAINT POI_AWAY_RESULT_POINT_NN NOT NULL ENABLE, 
	DIFFERENCE_POINT NUMBER(2,0) CONSTRAINT POI_DIFFERENCE_POINT_NN NOT NULL ENABLE, 
	INVERTED_DIFFERENCE_POINT NUMBER(2,0) CONSTRAINT POI_INVERTED_DIFFERENCE_POINT_NN NOT NULL ENABLE, 
	 CONSTRAINT POI_WIN_OR_DRAW_POINT_CK CHECK (WIN_OR_DRAW_POINT BETWEEN 0 AND 99) ENABLE, 
	 CONSTRAINT POI_HOME_RESULT_POINT_CK CHECK (HOME_RESULT_POINT BETWEEN 0 AND 99) ENABLE, 
	 CONSTRAINT POI_AWAY_RESULT_POINT_CK CHECK (AWAY_RESULT_POINT BETWEEN 0 AND 99) ENABLE, 
	 CONSTRAINT POI_DIFFERENCE_POINT_CK CHECK (DIFFERENCE_POINT BETWEEN 0 AND 99) ENABLE, 
	 CONSTRAINT POI_INVERTED_DIFFERENCE_POINT_CK CHECK (INVERTED_DIFFERENCE_POINT BETWEEN 0 AND 99) ENABLE, 
	 CONSTRAINT POINT_PK PRIMARY KEY (POINT_ID)
  USING INDEX  ENABLE
   );

CREATE TABLE ROUND 
   (	ROUND_ID RAW(16) CONSTRAINT ROU_ROUND_ID_NN NOT NULL ENABLE, 
	MASTER_POOL_ID RAW(16) CONSTRAINT ROU_MASTER_POOL_ID_NN NOT NULL ENABLE, 
	NAME VARCHAR2(100) CONSTRAINT ROU_NAME_NN NOT NULL ENABLE, 
	POINT_ID RAW(16) CONSTRAINT ROU_POINT_ID_NN NOT NULL ENABLE, 
	 CONSTRAINT ROUND_PK PRIMARY KEY (ROUND_ID)
  USING INDEX  ENABLE, 
	 CONSTRAINT ROU_MASTER_POOL_FK FOREIGN KEY (MASTER_POOL_ID)
	  REFERENCES MASTER_POOL (MASTER_POOL_ID) ENABLE, 
	 CONSTRAINT ROU_POINT_FK FOREIGN KEY (POINT_ID)
	  REFERENCES POINT (POINT_ID) ENABLE
   );

CREATE TABLE MATCH 
   (	MATCH_ID RAW(16) CONSTRAINT MAT_MATCH_ID_NN NOT NULL ENABLE, 
	HOME_TEAM_ID RAW(16) CONSTRAINT MAT_HOME_TEAM_ID_NN NOT NULL ENABLE, 
	AWAY_TEAM_ID RAW(16) CONSTRAINT MAT_AWAY_TEAM_ID_NN NOT NULL ENABLE, 
	ROUND_ID RAW(16) CONSTRAINT MAT_ROUND_ID_NN NOT NULL ENABLE, 
	MATCH_DATE DATE CONSTRAINT MAT_MATCH_DATE_NN NOT NULL ENABLE, 
	HOME_RESULT NUMBER(3,0), 
	AWAY_RESULT NUMBER(3,0), 
	STATUS NUMBER(1,0) CONSTRAINT MAT_STATUS_NN NOT NULL ENABLE, 
	 CONSTRAINT MATCH_PK PRIMARY KEY (MATCH_ID)
  USING INDEX  ENABLE, 
	 CONSTRAINT MAT_HOME_RESULT_CK CHECK (HOME_RESULT BETWEEN 0 AND 999) ENABLE, 
	 CONSTRAINT MAT_AWAY_RESULT_CK CHECK (AWAY_RESULT BETWEEN 0 AND 999) ENABLE, 
	 CONSTRAINT MAT_STATUS_CK CHECK (STATUS BETWEEN 0 AND 4) ENABLE, 
	 CONSTRAINT MAT_ROUND_ID FOREIGN KEY (ROUND_ID)
	  REFERENCES ROUND (ROUND_ID) ENABLE, 
	 CONSTRAINT MAT_HOME_TEAM_ID FOREIGN KEY (HOME_TEAM_ID)
	  REFERENCES TEAM (TEAM_ID) ENABLE, 
	 CONSTRAINT MAT_AWAY_TEAM_ID FOREIGN KEY (AWAY_TEAM_ID)
	  REFERENCES TEAM (TEAM_ID) ENABLE
   );

CREATE TABLE GAMBLER 
   (	USER_ID RAW(16) NOT NULL ENABLE, 
	 CONSTRAINT GAMBLER_PK PRIMARY KEY (USER_ID)
  USING INDEX  ENABLE
   );

CREATE TABLE POOL 
   (	POOL_ID RAW(16) CONSTRAINT POO_POOL_ID_NN NOT NULL ENABLE, 
	MASTER_POOL_ID RAW(16) CONSTRAINT POO_MASTER_POOL_ID_NN NOT NULL ENABLE, 
	OWNER_GAMBLER_ID RAW(16) CONSTRAINT POO_OWNER_GAMBLER_ID_NN NOT NULL ENABLE, 
	CREATION_DATE DATE CONSTRAINT POO_CREATION_DATE_NN NOT NULL ENABLE, 
	 CONSTRAINT POOL_PK PRIMARY KEY (POOL_ID)
  USING INDEX  ENABLE, 
	 CONSTRAINT POO_MASTER_POOL_FK FOREIGN KEY (MASTER_POOL_ID)
	  REFERENCES MASTER_POOL (MASTER_POOL_ID) ENABLE, 
	 CONSTRAINT POO_GAMBLER_FK FOREIGN KEY (OWNER_GAMBLER_ID)
	  REFERENCES GAMBLER (USER_ID) ENABLE
   );

CREATE TABLE POOL_ENROLLMENT 
   (	POOL_ID RAW(16) CONSTRAINT PEN_POOL_ID_NN NOT NULL ENABLE, 
	GAMBLER_ID RAW(16) CONSTRAINT PEN_GAMBLER_ID_NN NOT NULL ENABLE, 
	ENROLLMENT_DATE DATE CONSTRAINT PEN_ENROLLMENT_DATE_NN NOT NULL ENABLE, 
	 CONSTRAINT POOL_ENROLLMENT_PK PRIMARY KEY (POOL_ID, GAMBLER_ID)
  USING INDEX  ENABLE, 
	 CONSTRAINT PEN_POOL FOREIGN KEY (POOL_ID)
	  REFERENCES POOL (POOL_ID) ENABLE, 
	 CONSTRAINT PEN_GAMBLER FOREIGN KEY (GAMBLER_ID)
	  REFERENCES GAMBLER (USER_ID) ENABLE
   );

CREATE TABLE BET 
   (	POOL_ID RAW(16) CONSTRAINT BET_POOL_ID_NN NOT NULL ENABLE, 
	GAMBLER_ID RAW(16) CONSTRAINT BET_GAMBLER_ID_NN NOT NULL ENABLE, 
	MATCH_ID RAW(16) CONSTRAINT BET_MATCH_ID_NN NOT NULL ENABLE, 
	HOME_TEAM_VALUE NUMBER(3,0) CONSTRAINT BET_HOME_TEAM_VALUE_NN NOT NULL ENABLE, 
	AWAY_TEAM_VALUE NUMBER(3,0) CONSTRAINT BET_AWAY_TEAM_VALUE_NN NOT NULL ENABLE, 
	 CONSTRAINT BET_PK PRIMARY KEY (POOL_ID, GAMBLER_ID, MATCH_ID)
  USING INDEX  ENABLE, 
	 CONSTRAINT BET_HOME_TEAM_VALUE_CK CHECK (HOME_TEAM_VALUE BETWEEN 0 AND 999) ENABLE, 
	 CONSTRAINT BET_AWAY_TEAM_VALUE_CK CHECK (AWAY_TEAM_VALUE BETWEEN 0 AND 999) ENABLE, 
	 CONSTRAINT BET_POOL_ENROLLMENT_FK FOREIGN KEY (POOL_ID, GAMBLER_ID)
	  REFERENCES POOL_ENROLLMENT (POOL_ID, GAMBLER_ID) ENABLE, 
	 CONSTRAINT BET_MATCH_FK FOREIGN KEY (MATCH_ID)
	  REFERENCES MATCH (MATCH_ID) ENABLE
   ); 

   CREATE OR REPLACE VIEW V_BET AS
SELECT A.GAMBLER_ID,
    A.MATCH_ID,
    A.HOME_TEAM_VALUE,
    A.AWAY_TEAM_VALUE, 
    A.POOL_ID, 
    A.HOME_TEAM_ID,
    A.AWAY_TEAM_ID,
    A.MATCH_DATE,
    A.HOME_RESULT,
    A.AWAY_RESULT, 
    A.MATCH_STATUS, 
    A.HOME_TEAM_NAME,
    A.AWAY_TEAM_NAME,
    A.ROUND_ID,
    A.ROUND_NAME, 
    A.MASTER_POOL_ID, 
    A.WIN_OR_DRAW_POINT,
    A.HOME_RESULT_POINT,
    A.AWAY_RESULT_POINT,
    A.DIFFERENCE_POINT,
    A.INVERTED_DIFFERENCE_POINT,
    A.POINT,
    RANK() OVER (PARTITION BY A.MATCH_ID ORDER BY A.POINT DESC) POSITION
FROM (
    SELECT BET.GAMBLER_ID,
        BET.MATCH_ID,
        BET.HOME_TEAM_VALUE,
        BET.AWAY_TEAM_VALUE,
        BET.POOL_ID,
        MAT.HOME_TEAM_ID,
        MAT.AWAY_TEAM_ID,
        MAT.MATCH_DATE,
        MAT.HOME_RESULT,
        MAT.AWAY_RESULT,
        MAT.STATUS AS MATCH_STATUS,
        HTE.NAME AS HOME_TEAM_NAME,
        ATE.NAME AS AWAY_TEAM_NAME,
        MAT.ROUND_ID,
        ROU.NAME AS ROUND_NAME,
        ROU.MASTER_POOL_ID,
        POI.WIN_OR_DRAW_POINT,
        POI.HOME_RESULT_POINT,
        POI.AWAY_RESULT_POINT,
        POI.DIFFERENCE_POINT,
        POI.INVERTED_DIFFERENCE_POINT,
        CASE WHEN (MAT.HOME_RESULT - MAT.AWAY_RESULT >= 0 AND BET.HOME_TEAM_VALUE - BET.AWAY_TEAM_VALUE >= 0) 
            OR (MAT.HOME_RESULT - MAT.AWAY_RESULT < 0 AND BET.HOME_TEAM_VALUE - BET.AWAY_TEAM_VALUE < 0) 
            THEN POI.WIN_OR_DRAW_POINT
            ELSE 0 
        END +
        CASE WHEN MAT.HOME_RESULT = BET.HOME_TEAM_VALUE
            THEN POI.HOME_RESULT_POINT
            ELSE 0
        END +  
        CASE WHEN MAT.AWAY_RESULT = BET.AWAY_TEAM_VALUE
            THEN POI.AWAY_RESULT_POINT
            ELSE 0
        END +
        CASE WHEN MAT.HOME_RESULT - MAT.AWAY_RESULT = BET.HOME_TEAM_VALUE - BET.AWAY_TEAM_VALUE
            THEN POI.DIFFERENCE_POINT
            ELSE 0
        END +
        CASE WHEN MAT.HOME_RESULT - MAT.AWAY_RESULT = BET.AWAY_TEAM_VALUE - BET.HOME_TEAM_VALUE
            THEN POI.INVERTED_DIFFERENCE_POINT
            ELSE 0
        END POINT
    FROM BET BET
    JOIN MATCH MAT ON MAT.MATCH_ID = BET.MATCH_ID
    JOIN ROUND ROU ON ROU.ROUND_ID = MAT.ROUND_ID
    JOIN POINT POI ON POI.POINT_ID = ROU.POINT_ID
    JOIN TEAM HTE ON HTE.TEAM_ID = MAT.HOME_TEAM_ID
    JOIN TEAM ATE ON ATE.TEAM_ID = MAT.AWAY_TEAM_ID
) A;

CREATE OR REPLACE VIEW V_BET AS
SELECT A.GAMBLER_ID,
    A.MATCH_ID,
    A.HOME_TEAM_VALUE,
    A.AWAY_TEAM_VALUE, 
    A.POOL_ID, 
    A.HOME_TEAM_ID,
    A.AWAY_TEAM_ID,
    A.MATCH_DATE,
    A.HOME_RESULT,
    A.AWAY_RESULT, 
    A.MATCH_STATUS, 
    A.HOME_TEAM_NAME,
    A.AWAY_TEAM_NAME,
    A.ROUND_ID,
    A.ROUND_NAME, 
    A.MASTER_POOL_ID, 
    A.WIN_OR_DRAW_POINT,
    A.HOME_RESULT_POINT,
    A.AWAY_RESULT_POINT,
    A.DIFFERENCE_POINT,
    A.INVERTED_DIFFERENCE_POINT,
    A.POINT,
    RANK() OVER (PARTITION BY A.MATCH_ID ORDER BY A.POINT DESC) POSITION
FROM (
    SELECT BET.GAMBLER_ID,
        BET.MATCH_ID,
        BET.HOME_TEAM_VALUE,
        BET.AWAY_TEAM_VALUE,
        BET.POOL_ID,
        MAT.HOME_TEAM_ID,
        MAT.AWAY_TEAM_ID,
        MAT.MATCH_DATE,
        MAT.HOME_RESULT,
        MAT.AWAY_RESULT,
        MAT.STATUS AS MATCH_STATUS,
        HTE.NAME AS HOME_TEAM_NAME,
        ATE.NAME AS AWAY_TEAM_NAME,
        MAT.ROUND_ID,
        ROU.NAME AS ROUND_NAME,
        ROU.MASTER_POOL_ID,
        POI.WIN_OR_DRAW_POINT,
        POI.HOME_RESULT_POINT,
        POI.AWAY_RESULT_POINT,
        POI.DIFFERENCE_POINT,
        POI.INVERTED_DIFFERENCE_POINT,
        CASE WHEN (MAT.HOME_RESULT - MAT.AWAY_RESULT >= 0 AND BET.HOME_TEAM_VALUE - BET.AWAY_TEAM_VALUE >= 0) 
            OR (MAT.HOME_RESULT - MAT.AWAY_RESULT < 0 AND BET.HOME_TEAM_VALUE - BET.AWAY_TEAM_VALUE < 0) 
            THEN POI.WIN_OR_DRAW_POINT
            ELSE 0 
        END +
        CASE WHEN MAT.HOME_RESULT = BET.HOME_TEAM_VALUE
            THEN POI.HOME_RESULT_POINT
            ELSE 0
        END +  
        CASE WHEN MAT.AWAY_RESULT = BET.AWAY_TEAM_VALUE
            THEN POI.AWAY_RESULT_POINT
            ELSE 0
        END +
        CASE WHEN MAT.HOME_RESULT - MAT.AWAY_RESULT = BET.HOME_TEAM_VALUE - BET.AWAY_TEAM_VALUE
            THEN POI.DIFFERENCE_POINT
            ELSE 0
        END +
        CASE WHEN MAT.HOME_RESULT - MAT.AWAY_RESULT = BET.AWAY_TEAM_VALUE - BET.HOME_TEAM_VALUE
            THEN POI.INVERTED_DIFFERENCE_POINT
            ELSE 0
        END POINT
    FROM BET BET
    JOIN MATCH MAT ON MAT.MATCH_ID = BET.MATCH_ID
    JOIN ROUND ROU ON ROU.ROUND_ID = MAT.ROUND_ID
    JOIN POINT POI ON POI.POINT_ID = ROU.POINT_ID
    JOIN TEAM HTE ON HTE.TEAM_ID = MAT.HOME_TEAM_ID
    JOIN TEAM ATE ON ATE.TEAM_ID = MAT.AWAY_TEAM_ID
) A;

CREATE OR REPLACE VIEW V_CURRENT_POSITION AS
WITH MAIN_QUERY AS (
    SELECT ROWNUM AS NUM,
        A.*
    FROM (
        SELECT MAT.MATCH_ID,
            MAT.HOME_TEAM_ID,
            MAT.AWAY_TEAM_ID,
            MAT.ROUND_ID,
            MAT.MATCH_DATE,
            MPO.NAME AS MASTER_POOL_NAME,
            PEN.GAMBLER_ID,
            PEN.POOL_ID
        FROM MATCH MAT
        JOIN ROUND ROU ON ROU.ROUND_ID = MAT.ROUND_ID
        JOIN MASTER_POOL MPO ON MPO.MASTER_POOL_ID = ROU.MASTER_POOL_ID
        JOIN POOL POO ON POO.MASTER_POOL_ID = MPO.MASTER_POOL_ID
        JOIN POOL_ENROLLMENT PEN ON PEN.POOL_ID = POO.POOL_ID
        LEFT JOIN BET BET ON BET.MATCH_ID = MAT.MATCH_ID AND BET.POOL_ID = POO.POOL_ID
        ORDER BY PEN.GAMBLER_ID, MAT.MATCH_DATE DESC
    ) A
)
SELECT C.MATCH_ID,
    C.HOME_TEAM_ID,
    C.AWAY_TEAM_ID,
    C.ROUND_ID,
    C.MATCH_DATE,
    C.MASTER_POOL_NAME,
    C.GAMBLER_ID,
    C.POOL_ID,
    (
        SELECT SUM(VBE.POINT)
        FROM V_BET VBE
        WHERE VBE.GAMBLER_ID = C.GAMBLER_ID
    ) AS CURRENT_POINT,
    (
        SELECT AA.POSITION 
        FROM (
            SELECT VBE.POSITION
            FROM V_BET VBE
            WHERE VBE.GAMBLER_ID = C.GAMBLER_ID
            ORDER BY VBE.MATCH_DATE DESC
        ) AA
        WHERE ROWNUM <= 1
    ) AS CURRENT_POSITION,
    (
        SELECT AA.POSITION 
        FROM (
            SELECT VBE.POSITION
            FROM V_BET VBE
            WHERE VBE.GAMBLER_ID = C.GAMBLER_ID
            AND VBE.MATCH_DATE < C.MATCH_DATE
            ORDER BY VBE.MATCH_DATE DESC
        ) AA
        WHERE ROWNUM <= 1
    ) AS BEFORE_POSITION
FROM (
    SELECT MIN(A.NUM) AS NUM,
        A.GAMBLER_ID
    FROM MAIN_QUERY A
    GROUP BY A.GAMBLER_ID
) B
JOIN MAIN_QUERY C ON C.NUM = B.NUM;

CREATE OR REPLACE VIEW V_BET_POSITION AS
SELECT GBG.POOL_ID,
    GBG.GAMBLER_ID,
    GBG.ENROLLMENT_DATE,
    A.POINT,
    A.CURRENT_POSITION,
    A.BEFORE_POSITION
FROM POOL_ENROLLMENT GBG
LEFT JOIN (
    SELECT VBE.POOL_ID, 
        VBE.GAMBLER_ID,
        SUM(CURRENT_POINT) AS POINT,
        MIN(CURRENT_POSITION) AS CURRENT_POSITION,
        MIN(BEFORE_POSITION) AS BEFORE_POSITION
    FROM V_BET VBE
    JOIN V_CURRENT_POSITION VCP ON VCP.POOL_ID = VBE.POOL_ID AND VCP.GAMBLER_ID = VBE.GAMBLER_ID
    GROUP BY VBE.POOL_ID, 
        VBE.GAMBLER_ID
) A ON A.POOL_ID = GBG.POOL_ID AND A.GAMBLER_ID = GBG.GAMBLER_ID;

CREATE OR REPLACE VIEW V_MATCH AS
SELECT MAT.MATCH_ID,
    ROU.ROUND_ID,
    MPO.MASTER_POOL_ID,
    POO.POOL_ID,
    MAT.STATUS AS MATCH_STATUS,
    MAT.HOME_TEAM_ID,
    MAT.AWAY_TEAM_ID,
    MAT.MATCH_DATE,
    HTE.NAME AS HOME_TEAM_NAME,
    ATE.NAME AS AWAY_TEAM_NAME,
    NULL AS POINT
FROM MATCH MAT
JOIN ROUND ROU ON ROU.ROUND_ID = MAT.ROUND_ID
JOIN MASTER_POOL MPO ON MPO.MASTER_POOL_ID = ROU.MASTER_POOL_ID
JOIN POOL POO ON POO.MASTER_POOL_ID = MPO.MASTER_POOL_ID
JOIN TEAM HTE ON HTE.TEAM_ID = MAT.HOME_TEAM_ID
JOIN TEAM ATE ON ATE.TEAM_ID = MAT.AWAY_TEAM_ID
JOIN POOL_ENROLLMENT PEN ON PEN.POOL_ID = POO.POOL_ID
WHERE STATUS <> 2
UNION
SELECT MATCH_ID,
    ROUND_ID,
    MASTER_POOL_ID,
    POOL_ID,
    MATCH_STATUS,
    HOME_TEAM_ID,
    AWAY_TEAM_ID,
    MATCH_DATE,
    HOME_TEAM_NAME,
    AWAY_TEAM_NAME,
    POINT
FROM V_BET
WHERE MATCH_STATUS = 2;

CREATE OR REPLACE VIEW V_POOL_REVIEW AS
SELECT POO.POOL_ID,
    MPO.MASTER_POOL_ID,
    PEN.GAMBLER_ID,
    MPO.NAME AS MASTER_POOL_NAME,
    MPO.START_DATE,
    MPO.END_DATE,
    VCP.CURRENT_POINT,
    VCP.CURRENT_POSITION,
    VCP.BEFORE_POSITION
FROM POOL POO
JOIN MASTER_POOL MPO ON MPO.MASTER_POOL_ID = POO.MASTER_POOL_ID
JOIN POOL_ENROLLMENT PEN ON PEN.POOL_ID = POO.POOL_ID
LEFT JOIN V_CURRENT_POSITION VCP ON VCP.GAMBLER_ID = PEN.GAMBLER_ID;

CREATE OR REPLACE VIEW V_ON_PLAYING_MATCH AS
SELECT MAT.MATCH_ID,
    MAT.HOME_TEAM_ID,
    MAT.AWAY_TEAM_ID,
    MAT.MATCH_DATE,
    HTE.NAME AS HOME_TEAM_NAME,
    ATE.NAME AS AWAY_TEAM_NAME,
    MPO.MASTER_POOL_ID
FROM MATCH MAT
JOIN TEAM HTE ON HTE.TEAM_ID = MAT.HOME_TEAM_ID
JOIN TEAM ATE ON ATE.TEAM_ID = MAT.AWAY_TEAM_ID
JOIN ROUND ROU ON ROU.ROUND_ID = MAT.ROUND_ID
JOIN MASTER_POOL MPO ON MPO.MASTER_POOL_ID = ROU.MASTER_POOL_ID
WHERE STATUS = 1;

create or replace function raw_to_guid( raw_guid in raw ) return varchar2
is
  hex varchar2(32);
begin

  hex := rawtohex(raw_guid);

  return substr(hex, 7, 2) 
      || substr(hex, 5, 2) 
      || substr(hex, 3, 2) 
      || substr(hex, 1, 2) 
      || '-'
      || substr(hex, 11, 2) 
      || substr(hex, 9, 2) 
      || '-'
      || substr(hex, 15, 2) 
      || substr(hex, 13, 2) 
      || '-'
      || substr(hex, 17, 4) 
      || '-'
      || substr(hex, 21, 12);

end;
/

create or replace function guid_to_raw ( guid in varchar2 ) return raw
is
    hex varchar2(32);
begin

    hex := substr(guid, 7, 2)
    ||     substr(guid, 5, 2)
    ||     substr(guid, 3, 2)
    ||     substr(guid, 1, 2)
    --
    ||     substr(guid, 12, 2)
    ||     substr(guid, 10, 2)
    --
    ||     substr(guid, 17, 2)
    ||     substr(guid, 15, 2)
    -- 
    ||     substr(guid, 20, 2)
    ||     substr(guid, 22, 2)
    -- 
    ||     substr(guid, 25, 12);
    
    return hextoraw(hex);

end;
/
